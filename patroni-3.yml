scope: mars
namespace: /mars-cluster/
name: mars-postgres-node-4

restapi:
  listen: 10.20.30.93:8008
  connect_address: 10.20.30.93:8008
#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem
#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key
#  authentication:
#    username: username
#    password: password

# ctl:
#   insecure: false # Allow connections to SSL sites without certs
#   certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem
#   cacert: /etc/ssl/certs/ssl-cacert-snakeoil.pem

etcd:
  #Provide host to do the initial discovery of the cluster topology:
  #host: 127.0.0.1:2379
  #Or use "hosts" to provide multiple endpoints
  #Could be a comma separated string:
  #hosts: host1:port1,host2:port2
  #or an actual yaml list:
  hosts: 10.20.30.41:2379,10.20.30.42:2379,10.20.30.43:2379
  
  #Once discovery is complete Patroni will use the list of advertised clientURLs
  #It is possible to change this behavior through by setting:
  #use_proxies: true

#raft:
#  data_dir: .
#  self_addr: 127.0.0.1:2222
#  partner_addrs:
#  - 127.0.0.1:2223
#  - 127.0.0.1:2224

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`
  dcs:
    ttl: 90
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576
#    master_start_timeout: 300
    synchronous_mode: true
    #standby_cluster:
      #host: 127.0.0.1
      #port: 1111
      #primary_slot_name: patroni
    postgresql:
      use_pg_rewind: true
      use_slots: true
      parameters:
        wal_level: replica
        hot_standby: "on"
        max_connections: 100
        max_worker_processes: 8
        wal_keep_segments: 8
        max_wal_senders: 5
        max_replication_slots: 5
#        max_prepared_transactions: 0
#        max_locks_per_transaction: 64
        wal_log_hints: "on"
#        track_commit_timestamp: "off"
        archive_mode: "on"
        archive_timeout: 600s
        archive_command: "cp -f %p /db/pg_archived/%f"
      recovery_conf:
        restore_command: "cp -f /db/pg_archived/%f %p"

  # some desired options for 'initdb'
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
  - encoding: UTF8
  - data-checksums
  - locale: en_US.UTF8

  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
  # For kerberos gss based connectivity (discard @.*$)
  #- host replication replicator 127.0.0.1/32 gss include_realm=0
  #- host all all 0.0.0.0/0 gss include_realm=0
  - host replication replicator 10.20.30.91/32 md5
  - host replication replicator 10.20.30.92/32 md5
  - host replication replicator 10.20.30.90/32 md5
  - host all mars_admin 0.0.0.0/0 md5
  - host all root 0.0.0.0/0 md5
#  - hostssl all all 0.0.0.0/0 md5

  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
# post_init: /usr/local/bin/setup_cluster.sh

  # Some additional users users which needs to be created after initializing new cluster
  users:
    mars_admin:
      password: mars_admin_password
      options:
        - createrole
        - createdb

postgresql:
  listen: 10.20.30.93:5432
  connect_address: 10.20.30.93:5432
  data_dir: /etc/patroni/pgdata
  bin_dir: /usr/lib/postgresql/13/bin
#  config_dir:
  pgpass: /tmp/pgpass0
  authentication:
    replication:
      username: replicator
      password: replicatorSuperHarDpwd
    superuser:
      username: root
      password: admin
#    rewind:  # Has no effect on postgres 10 and lower
#      username: rewind_user
#      password: rewind_password
  # Server side kerberos spn
#  krbsrvname: postgres
  parameters:
    # Fully qualified kerberos ticket file for the running user
    # same as KRB5CCNAME used by the GSS
#   krb_server_keyfile: /var/spool/keytabs/postgres
    unix_socket_directories: '/var/run/postgresql'
    external_pid_file: '/var/run/postgresql/13-main.pid'
  # Additional fencing script executed after acquiring the leader lock but before promoting the replica
  #pre_promote: /path/to/pre_promote.sh

logging_collector: "on"
log_directory: "/var/log/postgresql"
log_filename: "patroni.log"


tags:
    replicatefrom: mars-postgres-node-2
    noloadbalance: true

